pipeline{
    agent{
        label "slave"
    }

    stages{
        
        stage("Configuring Ansible"){
            steps{
                script{
                    echo "CI pipeline was Successfull now we are running CD pipeline via webhooks"
                    // Install Ansible on the slave node
                    sh "yum install ansible -y || echo 'successfully installed Ansible' "
                }
            }
        }

        stage("Terraform Setup"){
            steps{
                script{
                    if(!fileExists('terraform_1.6.0_linux_amd64.zip')){
                        sh 'wget https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip'
                        sh 'unzip terraform_1.6.0_linux_amd64.zip'
                        sh 'mv terraform /usr/local/bin/'
                    }else{
                        echo 'Terrform zip file is already Exists.'
                    }
                }
            }
        }

        stage("Creating Infrastructure for PROD Environment") {
            steps {
                script {
                // Initialize Terraform
                sh "terraform -chdir=./deploy/terraformscripts init"

                // Use the SSH key from Jenkins credentials
                withCredentials([sshUserPrivateKey(credentialsId: 'SSH_KEY_PATH', keyVariable: 'SSH_KEY_PATH')]) {
                // Write the SSH key to a temporary file
                
                 sh """
                    cat <<EOF > /tmp/id_rsa
                    ${SSH_KEY_PATH}
                    EOF
                    chmod 600 /tmp/id_rsa  # Set appropriate permissions
                """

                sh "terraform -chdir=./deploy/terraformscripts plan -var 'key_path=/tmp/id_rsa'"

                def applyStatus = sh(script: "terraform -chdir=./deploy/terraformscripts apply -var 'key_path=/tmp/id_rsa' --auto-approve", returnStatus: true)
                    if (applyStatus != 0) {
                        error("Terraform apply failed with status: ${applyStatus}")
                    }
                }

                // Sleep to allow infrastructure provisioning time
                sleep 30

                // Copy the inventory file
                sh "cp ./deploy/terraformscripts/inventory ./deploy/playbooks/inventory"
                echo "Successfully created infrastructure."
                }
            }
        }



        stage("Configure K8s cluster via Ansible on Infrastructure"){
            environment{
                ANSIBLE = './deploy/playbooks'
            }
            steps{
                dir("${ANSIBLE}"){
                    sh "ansible-playbook k8scommon.yaml"
                    sh "ansible-playbook k8smaster.yaml"
                    echo "Successfully Configured K8s Cluster"
                }
            }
        }

        stage("Configuring monitoring setup (Prometheus and Grafana)"){
            environment{
                ANSIBLE = './deploy/playbooks/'
            }
            steps{
                dir("${ANSIBLE}"){
                    sh "ansible-playbook monitoring_playbook.yml"
                    echo "Successfully Configured prometheus and grafana"
                }
            }
        }

        stage("Deploying Application into prod") {
            environment {
                ANSIBLE = './deploy/playbooks'
            }
            steps {
                dir("${ANSIBLE}") { 
                    sh "ansible-playbook deployment_playbook.yaml"
                    echo "Successfully deployed"
                }
            }
        }
    }
}